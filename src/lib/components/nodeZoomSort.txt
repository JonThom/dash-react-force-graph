                if (true) {
                    // relations

                    // first rel sort

                    if (props.sortRelsBy1) {

                        // find out the attribute type

                        const relObjRelHasAttr = relations
                            .find((relObj) => props.sortRelsBy1 in relObj.relation);
                        if (typeof relObjRelHasAttr !== "undefined") {

                            if (typeof relObjRelHasAttr.relation[props.sortRelsBy1] === "string") {

                                relations.sort((objA, objB) => {

                                    return props.sortRelsBy1 in objA.relation && props.sortRelsBy1 in objB.relation
                                        ? objA.relation[props.sortRelsBy1].localeCompare(objB.relation[props.sortRelsBy1]) > 0
                                            ? props.sortRels1Descend
                                                ? -1
                                                : 1
                                            : -1
                                        : 0;

                                });

                            } else if (typeof relObjRelHasAttr.relation[props.sortRelsBy1] === "number") {

                                relations.sort((objA, objB) => {
                                    return props.sortRelsBy1 in objA.relation && props.sortRelsBy1 in objB.relation
                                        ? objB.relation[props.sortRelsBy1] - objB.relation[props.sortRelsBy1] > 0
                                            ? props.sortRels1Descend
                                                ? -1
                                                : 1
                                            : -1
                                        : 0;
                                });

                            } else if (typeof relObjRelHasAttr.relation[props.sortRelsBy1] === "boolean") {

                                relations.sort((objA, objB) => {

                                    return props.sortRelsBy1 in objA.relation && props.sortRelsBy1 in objB.relation
                                        ? objA.relation[props.sortRelsBy1] > objB.relation[props.sortRelsBy1]
                                            ? props.sortRels1Descend
                                                ? -1
                                                : 1
                                            : -1
                                        : 0;

                                });

                            }

                        }

                    }
                    // second rel sort
                    if (props.sortRelsBy2) {

                        // find out the attribute type
                        const relObjRelHasAttr = relations.find((relObj) => props.sortRelsBy2 in relObj.relation);

                        if (typeof relObjRelHasAttr !== "undefined") {

                            if (typeof relObjRelHasAttr.relation[props.sortRelsBy2] === "string") {

                                relations.sort((objA, objB) => {

                                    return props.sortRelsBy2 in objA.relation && props.sortRelsBy2 in objB.relation
                                        ? objA.relation[props.sortRelsBy2].localeCompare(objB.relation[props.sortRelsBy2]) > 0
                                            ? props.sortRels2Descend
                                                ? -1
                                                : 1
                                            : -1
                                        : 0;

                                });

                            } else if (typeof relObjRelHasAttr.relation[props.sortRelsBy2] === "number") {

                                relations.sort((objA, objB) => {

                                    return props.sortRelsBy2 in objA.relation && props.sortRelsBy2 in objB.relation
                                        ? objA.relation[props.sortRelsBy2] - objB.relation[props.sortRelsBy2] > 0
                                            ? props.sortRels2Descend
                                                ? -1
                                                : 1
                                            : -1
                                        : 0;

                                });

                            } else if (typeof relObjRelHasAttr.relation[props.sortRelsBy2] === "boolean") {

                                relations.sort((objA, objB) => {

                                    return props.sortRelsBy2 in objA.relation && props.sortRelsBy2 in objB.relation
                                        ? objA.relation[props.sortRelsBy2] > objB.relation[props.sortRelsBy2]
                                            ? props.sortRels2Descend
                                                ? -1
                                                : 1
                                            : -1
                                        : 0;

                                });

                            }

                        }

                    }

                    // Sort role players

                    // First role player sort

                    if (props.sortRoleplayersBy1) {

                        // Relation role players

                        // Find out the attribute type
                        let nodeRelRpHasAttr = undefined;

                        for (const relObj of relations) {

                            nodeRelRpHasAttr = relObj.roleplayers.find((rp) => props.sortRoleplayersBy1 in rp);
                            if (typeof nodeRelRpHasAttr !== "undefined") {

                                break;

                            }

                        }
                        if (typeof nodeRelRpHasAttr !== "undefined") {

                            for (const relObj of relations) {

                                if (typeof nodeRelRpHasAttr[props.sortRoleplayersBy1] === "string") {

                                    relObj.roleplayers.sort((objA, objB) => {

                                        return props.sortRoleplayersBy1 in objA && props.sortRoleplayersBy1 in objB
                                            ? objA[props.sortRoleplayersBy1].localeCompare(objB[props.sortRoleplayersBy1]) > 0
                                                ? props.sortRoleplayers1Descend
                                                    ? -1
                                                    : 1
                                                : -1
                                            : 0;

                                    });

                                } else if (typeof nodeRelRpHasAttr[props.sortRoleplayersBy1] === "number") {

                                    relObj.roleplayers.sort((objA, objB) => {

                                        return props.sortRoleplayersBy1 in objA && props.sortRoleplayersBy1 in objB
                                            ? objA[props.sortRoleplayersBy1] - objB[props.sortRoleplayersBy1] > 0
                                                ? props.sortRoleplayers1Descend
                                                    ? -1
                                                    : 1
                                                : -1
                                            : 0;

                                    });

                                } else if (typeof nodeRelRpHasAttr[props.sortRoleplayersBy1] === "boolean") {

                                    relObj.roleplayers.sort((objA, objB) => {

                                        return props.sortRoleplayersBy1 in objA && props.sortRoleplayersBy1 in objB
                                            ? objA[props.sortRoleplayersBy1] > objB[props.sortRoleplayersBy1]
                                                ? props.sortRoleplayers1Descend
                                                    ? -1
                                                    : 1
                                                : -1
                                            : 0;

                                    });

                                }

                            }

                        }

                        // Related role players

                        // Find out the attribute type

                        let nodeRpHasAttr = related.find((rp) => props.sortRoleplayersBy1 in rp);

                        if (typeof nodeRpHasAttr !== "undefined") {

                            if (typeof nodeRpHasAttr[props.sortRoleplayersBy1] === "string") {

                                related.sort((objA, objB) => {

                                    return props.sortRoleplayersBy1 in objA && props.sortRoleplayersBy1 in objB
                                        ? objA[props.sortRoleplayersBy1].localeCompare(objB[props.sortRoleplayersBy1]) > 0
                                            ? props.sortRoleplayers1Descend
                                                ? -1
                                                : 1
                                            : -1
                                        : 0;

                                });

                            } else if (typeof nodeRpHasAttr[props.sortRoleplayersBy1] === "number") {

                                related.sort((objA, objB) => {

                                    return props.sortRoleplayersBy1 in objA && props.sortRoleplayersBy1 in objB
                                        ? objA[props.sortRoleplayersBy1] - objB[props.sortRoleplayersBy1] > 0
                                            ? props.sortRoleplayers1Descend
                                                ? -1
                                                : 1
                                            : -1
                                        : 0;

                                });

                            } else if (typeof nodeRpHasAttr[props.sortRoleplayersBy1] === "boolean") {

                                related.sort((objA, objB) => {

                                    return props.sortRoleplayersBy1 in objA && props.sortRoleplayersBy1 in objB
                                        ? objA[props.sortRoleplayersBy1] > objB[props.sortRoleplayersBy1]
                                            ? props.sortRoleplayers1Descend
                                                ? -1
                                                : 1
                                            : -1
                                        : 0;

                                });

                            }

                        }

                    }

                    // Second role player sort

                    if (props.sortRoleplayersBy2) {

                        // relation role players
                        // find out the attribute type
                        let nodeRelRpHasAttr = undefined;

                        for (const relObj of relations) {

                            nodeRelRpHasAttr = relObj.roleplayers.find((rp) => props.sortRoleplayersBy2 in rp);
                            if (typeof nodeRelRpHasAttr !== "undefined") {

                                break;

                            }

                        }

                        if (typeof nodeRelRpHasAttr !== "undefined") {

                            for (const relObj of relations) {

                                if (typeof nodeRelRpHasAttr[props.sortRoleplayersBy2] === "string") {

                                    relObj.roleplayers.sort((objA, objB)=> {

                                        return props.sortRoleplayersBy2 in objA && props.sortRoleplayersBy2 in objB
                                            ? objA[props.sortRoleplayersBy2].localeCompare(objB[props.sortRoleplayersBy2]) > 0
                                                ? props.sortRoleplayers2Descend
                                                    ? -1
                                                    : 1
                                                : -1
                                            : 0;
                                    });

                                } else if (typeof nodeRelRpHasAttr[props.sortRoleplayersBy2] === "number") {

                                    relObj.roleplayers.sort((objA, objB) => {

                                        return props.sortRoleplayersBy2 in objA && props.sortRoleplayersBy2 in objB
                                            ? objA[props.sortRoleplayersBy2] - objB[props.sortRoleplayersBy2] > 0
                                                ? props.sortRoleplayers2Descend
                                                    ? -1
                                                    : 1
                                                : -1
                                            : 0;

                                    });

                                } else if (typeof nodeRelRpHasAttr[props.sortRoleplayersBy2] === "boolean") {

                                    relObj.roleplayers.sort((objA, objB) => {

                                        return props.sortRoleplayersBy2 in objA && props.sortRoleplayersBy2 in objB
                                            ? objA[props.sortRoleplayersBy2] > objB[props.sortRoleplayersBy2]
                                                ? props.sortRoleplayers2Descend
                                                    ? -1
                                                    : 1
                                                : -1
                                            : 0;

                                    });

                                }

                            }

                        }

                        // Related role players

                        // Find out the attribute type

                        const nodeRpHasAttr = related.find((rp) => props.sortRoleplayersBy2 in rp);

                        if (typeof nodeRpHasAttr !== "undefined") {

                            if (typeof nodeRpHasAttr[props.sortRoleplayersBy2] === "string") {

                                related.sort((objA, objB) => {

                                    return props.sortRoleplayersBy2 in objA && props.sortRoleplayersBy2 in objB
                                        ? objA[props.sortRoleplayersBy2].localeCompare(objB[props.sortRoleplayersBy2]) > 0
                                            ? props.sortRoleplayers2Descend
                                                ? -1
                                                : 1
                                            : -1
                                        : 0;

                                });

                            } else if (typeof nodeRpHasAttr[props.sortRoleplayersBy2] === "number") {

                                related.sort((objA, objB) => {

                                    return props.sortRoleplayersBy2 in objA && props.sortRoleplayersBy2 in objB
                                        ? objA[props.sortRoleplayersBy2] - objB[props.sortRoleplayersBy2] > 0
                                            ? props.sortRoleplayers2Descend
                                                ? -1
                                                : 1
                                            : -1
                                        : 0;

                                });

                            } else if (typeof nodeRpHasAttr[props.sortRoleplayersBy2] === "boolean") {

                                related.sort((objA, objB) => {

                                    return props.sortRoleplayersBy2 in objA && props.sortRoleplayersBy2 in objB
                                        ? objA[props.sortRoleplayersBy2] > objB[props.sortRoleplayersBy2]
                                            ? props.sortRoleplayers2Descend
                                                ? -1
                                                : 1
                                            : -1
                                        : 0;

                                });

                            }

                        }

                    }

                }